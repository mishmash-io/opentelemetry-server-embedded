//
//    Copyright 2024 Mishmash IO UK Ltd.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

syntax = "proto3";

package io.mishmash.opentelemetry.persistence.proto.v1;

import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/logs/v1/logs.proto";

option java_package = "io.mishmash.opentelemetry.persistence.proto.v1";
option java_outer_classname = "LogsPersistenceProto";

message PersistedLog {
  // OTLP messages are essentially collections of entries (logs, metrics or traces) and a batch is 
  // one such collection. For each of these 'batches' (or messages) a timestamp (batch_timestamp) 
  // is recorded - noting when it was received, and also an UUID is generated and written to batch_UUID.
  // Additionally, each entry in a batch will have its index recorded in seq_no.
  // Together these fields can be used to, say, de-flatten data in SQL queries or something.
  int64 batch_timestamp = 1;
  string batch_UUID = 2;
  int32 seq_no = 3;

  // The following are extracted from opentelemetry.proto.resource.v1.Resource if it is present
  repeated .opentelemetry.proto.common.v1.KeyValue resource_attributes = 4;
  uint32 resource_dropped_attributes_count = 5;

  // The Schema URL, if known. This is the identifier of the Schema that the resource data
  // is recorded in. To learn more about Schema URL see
  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
  // This schema_url applies to the data in the "resource" field. It does not apply
  // to the data in the "scope_logs" field which have their own schema_url field.
  string resource_schema_url = 6;

  // The following are extracted from opentelemetry.proto.common.v1.InstrumentationScope
  string scope_name = 7;
  string scope_version = 8;
  repeated .opentelemetry.proto.common.v1.KeyValue scope_attributes = 9;
  uint32 scope_dropped_attributes_count = 10;

  // the following are extracted from opentelemetry.proto.logs.v1.LogRecord
  fixed64 time_unix_nano = 11;
  fixed64 observed_time_unix_nano = 12;
  .opentelemetry.proto.logs.v1.SeverityNumber severity_number = 13;
  string severity_text = 14;
  
  // Tells what is the type of the data in the log body - STRING_VALUE, INT_VALUE, BOOL_VALUE, etc
  string body_type = 15;
  // depending on body type - use one of these to get the actual log record body:
  optional string body_string = 16;
  optional bool body_bool = 17;
  optional int64 body_int = 18;
  optional double body_double = 19;
  optional .opentelemetry.proto.common.v1.ArrayValue body_array = 20;
  optional .opentelemetry.proto.common.v1.KeyValueList body_kvlist = 21;
  optional bytes body_bytes = 22;

  repeated .opentelemetry.proto.common.v1.KeyValue attributes = 23;
  uint32 dropped_attributes_count = 24;
  fixed32 flags = 25;
  bytes trace_id = 26;
  bytes span_id = 27;

  // The Schema URL, if known. This is the identifier of the Schema that the log data
  // is recorded in. To learn more about Schema URL see
  // https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
  string log_schema_url = 28;

  // is_valid will be false if the system found this record to not comply with OTLP specs.
  bool is_valid = 29;

  // when is_valid is false, error_message will provide some information on what was wrong.
  string error_message = 30;
}
